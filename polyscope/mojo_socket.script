def mojo_socket():
  modbus_add_signal("127.0.0.1", 255, 128, 2, "L1_X")
  modbus_set_signal_update_frequency("L1_X", 10)
  modbus_add_signal("127.0.0.1", 255, 129, 2, "L1_Y")
  modbus_set_signal_update_frequency("L1_Y", 10)
  modbus_add_signal("127.0.0.1", 255, 130, 2, "L2_X")
  modbus_set_signal_update_frequency("L2_X", 10)
  modbus_add_signal("127.0.0.1", 255, 131, 2, "L2_Y")
  modbus_set_signal_update_frequency("L2_Y", 10)
  set_analog_inputrange(0, 0)
  set_analog_inputrange(1, 0)
  set_analog_inputrange(2, 0)
  set_analog_inputrange(3, 0)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_runstate_outputs([])
  set_payload(2.0)
  set_gravity([0.0, 0.0, 9.82])
  joy_x=100
  varmsg("joy_x",joy_x)
  Plane_1=p[-0.26513175587789256,-0.461841503836437,-0.09815214509813479,2.1410039208547103,-2.271772538745896,0.019817272335666127]
  varmsg("Plane_1",Plane_1)
  rq_force=0
  varmsg("rq_force",rq_force)
  rq_obj_detect=0
  varmsg("rq_obj_detect",rq_obj_detect)
  rq_speed=0
  varmsg("rq_speed",rq_speed)
  $ 66 "SubProgram_1"
  def SubProgram_1():
    receive_data=socket_read_ascii_float(6,"robot_socket")
    if (receive_data[0] !=6):
      socket_send_string("0","robot_socket")
    else:
      socket_send_string("1","robot_socket")
      global pointer = 0
      varmsg("pointer",pointer)
      while (pointer <receive_data[0]):
        Move_To_Joints[pointer]=receive_data[pointer+1]
        global pointer = pointer+1
        varmsg("pointer",pointer)
      end
      global task = [0,0]
      varmsg("task",task)
    end
  end
  $ 77 "SubP_set_tcp"
  def SubP_set_tcp():
    receive_data=socket_read_ascii_float(6,"robot_socket")
    if (receive_data[0] !=6):
      socket_send_string("0","robot_socket")
    else:
      socket_send_string("1","robot_socket")
      global pointer = 0
      varmsg("pointer",pointer)
      while (pointer <receive_data[0]):
        Move_To_Tcp[pointer]=receive_data[pointer+1]
        global pointer = pointer+1
        varmsg("pointer",pointer)
      end
      global task = [0,0]
      varmsg("task",task)
    end
  end
  $ 88 "SubP_set_grip"
  def SubP_set_grip():
    receive_data=socket_read_ascii_float(1,"robot_socket")
    if (receive_data[0] !=1):
      socket_send_string("0","robot_socket")
    else:
      socket_send_string("1","robot_socket")
      global pointer = 0
      varmsg("pointer",pointer)
      while (pointer <receive_data[0]):
        Move_To_Gripper[pointer]=receive_data[pointer+1]
        global pointer = pointer+1
        varmsg("pointer",pointer)
      end
      global task = [0,0]
      varmsg("task",task)
    end
  end
  $ 99 "SubProgram_2"
  def SubProgram_2():
    pose_1=get_joint_positions()
    socket_send_string(pose_1,"robot_socket")
  end
  $ 102 "SubProgram_3"
  def SubProgram_3():
    pose_1=get_joint_positions()
    global pointer = 0
    varmsg("pointer",pointer)
    while (pointer <receive_data[0]):
      Move_To_Joints[pointer]=pose_1[pointer]
      global pointer = pointer+1
      varmsg("pointer",pointer)
    end
  end
  $ 108 "SubP_rq_activate_and_wait"
  def SubP_rq_activate_and_wait():
    rq_activate_and_wait()
  end
  $ 110 "SubP_rq_close_and_wait"
  def SubP_rq_close_and_wait():
    rq_close_and_wait()
  end
  $ 112 "SubP_rq_open_and_wait"
  def SubP_rq_open_and_wait():
    rq_open_and_wait()
  end
  $ 114 "SubP_rq_is_object_detected"
  def SubP_rq_is_object_detected():
    rq_is_object_detected()
  end
  $ 116 "SubP_rq_set_force"
  def SubP_rq_set_force():
    rq_set_force(rq_force)
  end
  $ 118 "SubP_rq_set_speed"
  def SubP_rq_set_speed():
    rq_set_speed(rq_speed)
  end
  $ 1 "BeforeStart"
  socket_close("gripper_socket")
  sleep(2)
  socket_open("127.0.0.1",63352,"gripper_socket")
  ###############################################################
  # Script file used to communicate with Robotiq's gripper driver
  # Version: DCU-1.0.10
  ###############################################################
  
  #aliases for the gripper variable names
  ACT = 1
  GTO = 2
  ATR = 3
  ARD = 4
  FOR = 5
  SPE = 6
  OBJ = 7
  STA = 8
  FLT = 9
  POS = 10
  
  def rq_activate():
  	rq_gripper_act = 0
  	rq_set_var(ACT,1)
  end
  
  def rq_activate_and_wait():
  	rq_activate()
  
  	while(not rq_is_gripper_activated()):
  		# wait for activation completed
  	end
  end
  
  def rq_stop():
  	rq_set_var(GTO,0)
  end
  
  def rq_reset():
  	rq_gripper_act = 0
  	rq_obj_detect = 0
  	rq_mov_complete = 0
  
  	rq_set_var(ACT,0)
  end
  
  def rq_auto_release_open_and_wait():
  
  	rq_set_var(ARD,0)
  	rq_set_var(ACT,1)
  	rq_set_var(ATR,1)
  
  	gFLT = rq_get_var(FLT, 2)
  
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2)
  	end
  end
  
  def rq_auto_release_close_and_wait():
  	rq_set_var(ARD,1)
  	rq_set_var(ACT,1)
  	rq_set_var(ATR,1)
  
  	gFLT = rq_get_var(FLT, 2)
  
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2)
  	end
  end
  
  def rq_set_force(force):
  	rq_set_var(FOR,force)
  end
  
  def rq_set_speed(speed):
  	rq_set_var(SPE,speed)
  end
  
  def rq_open():
  	rq_move(0)
  end
  
  def rq_close():
  	rq_move(255)
  end
  
  def rq_open_and_wait():
  	rq_move_and_wait(0)
  end
  
  def rq_close_and_wait():
  	rq_move_and_wait(255)
  end
  
  def rq_move(pos):
  	rq_mov_complete = 0
  	rq_obj_detect = 0
  
  	rq_set_var(GTO,1)
  
  	rq_set_var(POS,pos)
  end
  
  def rq_move_and_wait(pos):
  	rq_move(pos)
  
  	while (not rq_is_motion_complete()):
  		# wait for motion completed
  		sleep(0.01)
  		sync()
  	end
  
  	# following code used for compatibility with previous versions
  	rq_is_object_detected() 
  
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  
  def rq_is_motion_complete():
  	rq_mov_complete = 0
  
  	gOBJ = rq_get_var(OBJ, 1)
  	sleep(0.01)
  
  	if (is_OBJ_gripper_at_position(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  
  	if (is_OBJ_object_detected(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  
  	return False
  
  end
  
  def rq_is_gripper_activated():
  	gSTA = rq_get_var(STA, 1)
  
  	if(is_STA_gripper_activated(gSTA)):
  		rq_gripper_act = 1
  		return True
  	else:
  		rq_gripper_act = 0
  		return False
  	end
  end
  
  def rq_is_object_detected():
  	gOBJ = rq_get_var(OBJ, 1)
  
  	if(is_OBJ_object_detected(gOBJ)):
  		rq_obj_detect = 1
  		return True
  	else:
  		rq_obj_detect = 0
  		return False
  	end
  end
  
  def rq_print_fault_code():
  	gFLT = rq_get_var(FLT, 2)
  
  	if(is_FLT_no_fault(gFLT)):
  		textmsg("Gripper Fault : ", "No Fault (0x00)")
  	elif (is_FLT_action_delayed(gFLT)):
  		textmsg("Gripper Fault : ", "Priority Fault: Action delayed, initialization must be completed prior to action (0x05)")
  	elif (is_FLT_not_activated(gFLT)):
  		textmsg("Gripper Fault : ", "Priority Fault: The activation must be set prior to action (0x07)")
  	elif (is_FLT_autorelease_in_progress(gFLT)):
  		textmsg("Gripper Fault : ", "Minor Fault: Automatic release in progress (0x0B)")
  	elif (is_FLT_overcurrent(gFLT)):
  		textmsg("Gripper Fault : ", "Minor Fault: Overcurrent protection tiggered (0x0E)")
  	elif (is_FLT_autorelease_completed(gFLT)):
  		textmsg("Gripper Fault : ", "Major Fault: Automatic release completed (0x0F)")
  	else:
  		textmsg("Gripper Fault : ", "Unkwown Fault")
  	end
  end
  
  def rq_print_num_cycles():
  	socket_send_string("GET NCY","gripper_socket")
  	sync()
  	string_from_server = socket_read_string("gripper_socket")
  	sync()
  
  	if(string_from_server == "0"):
  		textmsg("Gripper Cycle Number : ", "Number of cycles is unreachable.")
  	else:
  		textmsg("Gripper Cycle Number : ", string_from_server)
  	end
  end
  
  def rq_print_driver_state():
  	socket_send_string("GET DST","gripper_socket")
  	sync()
  	string_from_server = socket_read_string("gripper_socket")
  	sync()
  
  	if(string_from_server == "0"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_INIT")
  	elif(string_from_server == "1"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_LISTEN")
  	elif(string_from_server == "2"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_READ_INFO")
  	elif(string_from_server == "3"):
  		textmsg("Gripper Driver State : ", "RQ_STATE_ACTIVATION")
  	else:
  		textmsg("Gripper Driver State : ", "RQ_STATE_RUN")
  	end
  end
  
  def rq_print_serial_number():
  	#socket_send_string("GET SNU","gripper_socket")
  	#sync()
  	#string_from_server = socket_read_string("gripper_socket")
  	#sync()
  	#textmsg("Gripper Serial Number : ", string_from_server)
  end
  
  def rq_print_firmware_version():
  	socket_send_string("GET FWV","gripper_socket")
  	sync()
  	string_from_server = socket_read_string("gripper_socket")
  	sync()
  	textmsg("Gripper Firmware Version : ", string_from_server)
  end
  
  def rq_print_driver_version():
  	socket_send_string("GET VER","gripper_socket")
  	sync()
  	string_from_server = socket_read_string("gripper_socket")
  	sync()
  	textmsg("Gripper Driver Version : ", string_from_server)
  end
  
  def rq_print_probleme_connection():
  	socket_send_string("GET PCO","gripper_socket")
  	sync()
  	string_from_server = socket_read_string("gripper_socket")
  	sync()
  	if (string_from_server == "0"):
  		textmsg("Gripper Connection State : ", "No connection problem detected")
  	else:
  		textmsg("Gripper Connection State : ", "Connection problem detected")
  	end
  end
  
  def rq_current_pos():
  	rq_pos = socket_get_var("POS","gripper_socket")
  	sync()
  end
  
  # Returns True if list_of_bytes is [3, 'a', 'c', 'k']
  def is_ack(list_of_bytes):
  	
  	# list length is not 3
  	if (list_of_bytes[0] != 3):
  		return False
  	end
  
  	# first byte not is 'a'?
  	if (list_of_bytes[1] != 97):
  		return False
  	end
  	
  	# first byte not is 'c'?
  	if (list_of_bytes[2] != 99):
  		return False
  	end
  	
  	# first byte not is 'k'?
  	if (list_of_bytes[3] != 107):
  		return False
  	end
  	
  	return True
  end
  
  # Returns True if list_of_bytes is not [3, 'a', 'c', 'k']
  def is_not_ack(list_of_bytes):
  	if (is_ack(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  
  def is_STA_gripper_activated (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '3'?
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  
  	return False
  end
  
  # Returns True if list_of_byte is [1, '1'] or [1, '2']
  # Used to test OBJ = 0x1 or OBJ = 0x2
  def is_OBJ_object_detected (list_of_bytes):
  	
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '2'?
  	if (list_of_bytes[1] == 50):
  		return True
  	end
  
  	# byte is '1'?
  	if (list_of_bytes[1]  == 49):
  		return True
  	end
  
  	return False
  	
  end
  
  # Returns True if list_of_byte is [1, '3']
  # Used to test OBJ = 0x3
  def is_OBJ_gripper_at_position (list_of_bytes):
  
  	# list length is not 1
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  
  	# byte is '3'?
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  	
  	return False
  end
  
  def is_not_OBJ_gripper_at_position (list_of_bytes):
  	
  	if (is_OBJ_gripper_at_position(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  
  def is_FLT_no_fault(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '0'?
  	if (list_of_bytes[2] != 48):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_action_delayed(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '5'?
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  
  	return True
  end
  
  def is_FLT_not_activated(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '0'?
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  
  	# second byte is '7'?
  	if (list_of_bytes[2] != 55):
  		return False
  	end
  
  	return True
  end
  
  def is_FLT_autorelease_in_progress(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '1'?
  	if (list_of_bytes[2] != 49):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_overcurrent(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '4'?
  	if (list_of_bytes[2] != 52):
  		return False
  	end
  
  	return True
  
  end
  
  def is_FLT_autorelease_completed(list_of_bytes):
  
  	# list length is not 2
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  
  	# first byte is '1'?
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  
  	# second byte is '5'?
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  
  	return True
  
  end
  
  def rq_set_var(var_id, var_value):
  	
  	var_name = ""
  
  	sync()
  	if   (var_id == ACT):
  		var_name = "ACT"
  	elif (var_id == GTO):
  		var_name = "GTO"
  	elif (var_id == ATR):
  		var_name = "ATR"
  	elif (var_id == ARD):
  		var_name = "ARD"
  	elif (var_id == FOR):
  		var_name = "FOR"
  	elif (var_id == SPE):
  		var_name = "SPE"
  	elif (var_id == POS):
  		var_name = "POS"
  	else:
  	end
  
  	socket_set_var(var_name, var_value, "gripper_socket")
  	sync()
  	ack = socket_read_byte_list(3, "gripper_socket")
  	sync()
  
  	while(is_not_ack(ack)):
  
  		textmsg("rq_set_var : retry", " ...")
  		textmsg("rq_set_var : var_name = ", var_name)
  		textmsg("rq_set_var : var_value = ", var_value)
  
  		if (ack[0] != 0):
  			textmsg("rq_set_var : invalid ack value = ", ack)
  		end
  
  		socket_set_var(var_name , var_value,"gripper_socket")
  		sync()
  		ack = socket_read_byte_list(3, "gripper_socket")
  		sync()
  	end
  end
  
  
  def rq_get_var(var_name, nbr_bytes):
  	
  	if (var_name == FLT):
  		socket_send_string("GET FLT","gripper_socket")
  		sync()
  	elif (var_name == OBJ):
  		socket_send_string("GET OBJ","gripper_socket")
  		sync()
  	elif (var_name == STA):
  		socket_send_string("GET STA","gripper_socket")
  		sync()
  	else:
  	end
  	
  	var_value = socket_read_byte_list(nbr_bytes, "gripper_socket")
  	sync()
  
  	return var_value
  end
  $ 4 "rq_obj_detect≔0"
  global rq_obj_detect = 0
  varmsg("rq_obj_detect",rq_obj_detect)
  $ 5 "rq_force≔0"
  global rq_force = 0
  varmsg("rq_force",rq_force)
  $ 6 "rq_speed≔255"
  global rq_speed = 255
  varmsg("rq_speed",rq_speed)
  $ 7 "Call SubP_rq_set_force"
  SubP_rq_set_force()
  $ 8 "Call SubP_rq_set_speed"
  SubP_rq_set_speed()
  $ 9 "Call SubP_rq_activate_and_wait"
  SubP_rq_activate_and_wait()
  $ 10 "Call SubP_rq_open_and_wait"
  SubP_rq_open_and_wait()
  $ 11 "receive_data≔[6,0,0,0,0,0,0]"
  global receive_data = [6,0,0,0,0,0,0]
  varmsg("receive_data",receive_data)
  $ 12 "Move_To_Joints≔[0,-1.5708,0,-1.5708,0,0]"
  global Move_To_Joints = [0,-1.5708,0,-1.5708,0,0]
  varmsg("Move_To_Joints",Move_To_Joints)
  $ 14 "Move_To_Tcp≔get_target_tcp_pose()"
  global Move_To_Tcp = get_target_tcp_pose()
  varmsg("Move_To_Tcp",Move_To_Tcp)
  $ 15 "Move_To_Gripper≔[0]"
  global Move_To_Gripper = [0]
  varmsg("Move_To_Gripper",Move_To_Gripper)
  $ 16 "Call SubProgram_3"
  SubProgram_3()
  $ 17 "socket_close('robot_socket')"
  socket_close("robot_socket")
  $ 18 "sleep(2)"
  sleep(2)
  $ 19 "socket_open('172.31.1.21',30000,'robot_socket')"
  socket_open("172.31.1.21",30000,"robot_socket")
  $ 20 "task≔[0,0]"
  global task = [0,0]
  varmsg("task",task)
  $ 21 "coop≔0"
  global coop = 0
  varmsg("coop",coop)
  $ 22 "tcp_ctrl≔ False "
  global tcp_ctrl =   False  
  varmsg("tcp_ctrl",tcp_ctrl)
  $ 64 "Thread_2"
  thread Thread_2():
    while True:
      rq_move(Move_To_Gripper[0])
    end
  end
  threadId_Thread_2 = run Thread_2()
  $ 51 "Thread_1"
  thread Thread_1():
    while True:
      if (coop ==1):
        while (coop ==1):
          thread Force_properties_calculation_thread_54():
            while (True):
              force_mode(p[0.0,0.0,0.0,0.0,0.0,0.0], [1, 1, 1, 1, 1, 1], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 2, [0.15, 0.15, 0.15, 1.0471975511965976, 1.0471975511965976, 1.0471975511965976])
              sync()
            end
          end
          global thread_handler_54 = run Force_properties_calculation_thread_54()
          sleep(0.01)
          kill thread_handler_54
          end_force_mode()
        end
        global coop = 0
        varmsg("coop",coop)
        SubProgram_3()
      else:
        if (  not  tcp_ctrl):
          movej(Move_To_Joints,a=0.2,v=0.3,r=0)
        else:
          movel(Move_To_Tcp,a=0.1,v=0.15,r=0)
        end
        sleep(0.01)
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 23 "Robot Program"
    $ 28 "task=socket_read_ascii_float(1,'robot_socket')"
    task=socket_read_ascii_float(1,"robot_socket")
    $ 29 "If task[1]≟2"
    if (task[1] ==2):
      $ 30 "Call SubProgram_2"
      SubProgram_2()
      $ 31 "task≔[0,0]"
      global task = [0,0]
      varmsg("task",task)
    else:
      $ 32 "ElseIf task[1]≟3"
      if (task[1] ==3):
        $ 33 "Call SubP_rq_open_and_wait"
        SubP_rq_open_and_wait()
        $ 34 "socket_send_string('1','robot_socket')"
        socket_send_string("1","robot_socket")
        $ 35 "task≔[0,0]"
        global task = [0,0]
        varmsg("task",task)
      else:
        $ 36 "ElseIf task[1]≟4"
        if (task[1] ==4):
          $ 37 "Call SubP_rq_close_and_wait"
          SubP_rq_close_and_wait()
          $ 38 "socket_send_string('1','robot_socket')"
          socket_send_string("1","robot_socket")
          $ 39 "task≔[0,0]"
          global task = [0,0]
          varmsg("task",task)
        else:
          $ 40 "ElseIf task[1]≟5"
          if (task[1] ==5):
            $ 41 "tcp_pose=get_actual_tcp_pose()"
            tcp_pose=get_actual_tcp_pose()
            $ 42 "socket_send_string(tcp_pose,'robot_socket')"
            socket_send_string(tcp_pose,"robot_socket")
            $ 43 "task≔[0,0]"
            global task = [0,0]
            varmsg("task",task)
          else:
            $ 44 "ElseIf task[1]≟1"
            if (task[1] ==1):
              $ 45 "Call SubProgram_1"
              SubProgram_1()
            else:
              $ 46 "ElseIf task[1]≟6"
              if (task[1] ==6):
                $ 47 "Call SubP_set_tcp"
                SubP_set_tcp()
              else:
                $ 48 "ElseIf task[1]≟7"
                if (task[1] ==7):
                  $ 49 "Call SubP_set_grip"
                  SubP_set_grip()
                end
              end
            end
          end
        end
      end
    end
    $ 50 "Wait: 0"
  end
end
